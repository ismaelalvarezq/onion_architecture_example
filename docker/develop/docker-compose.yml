version: '3.8'

services:
  configuration-api:
    container_name: 'configuration-api'
    image: ${APP_IMAGE}
    environment:
     - APP_IMAGE
     - NODE_ENV
     - PORT_APP
     - DOCKER_PORT_APP
     - DB_USERNAME
     - DB_HOST
     - DB_PASSWORD
     - DOCKER_DB_PORT
     - DB_PORT
     - DB_NAME
     - MONGODB_LINK
     - DSN_SENTRY
     - CLIENT_ID_ATENEA
     - CLIENT_SECRET_ATENEA
     - GRANT_TYPE_TOKEN_ATENEA
     - REDIRECT_URI_ATENEA
     - BASE_URL_ATENEA
     - CLIENT_ID_CREATE_USER_ATENEA
     - CLIENT_SECRET_CREATE_USER_ATENEA
     - GRANT_TYPE_CREATE_USER_ATENEA
     - SECRET_KEY_TOKEN_SERVICE
     - CRYPTO_KEY
     - BASE_URL_BE_AWARE
     - WEBSOCKET_URL
     - AWS_ACCESS_KEY_ID_S3
     - AWS_SECRET_ACCESS_KEY_S3
     - AWS_BUCKET_NAME_S3
    depends_on:
     - configuration-db
    build:
      context: .
      dockerfile: docker/develop/app.dockerfile
    ports:
      - '${DOCKER_PORT_APP}:${PORT_APP}'
    networks:
      - omnicanal-network
    volumes:
      - ./logs:/usr/src/app/logs

  configuration-db:
    container_name: 'configuration-db'
    image: 'postgres:15.1'
    restart: always
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - '${DOCKER_DB_PORT}:${DB_PORT}'
    volumes:
      - configuration-db:/var/lib/postgresql/data
    networks:
      - omnicanal-network

volumes:
  configuration-db:

networks:
  omnicanal-network:
    driver: bridge
    name: omnicanal-network
